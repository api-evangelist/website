---
- name: Authentication
  description: Providing details on how to authenticate with an API.
- name: Change Log
  description: There is the regular GitHub changelog markdown for repository.
- name: Code Generator
  description: Provide you with the ability to generate code.
- name: Collections
  description: Postman collections were oftentimes part of the build output.
- name: Contact
  description: I found some contact information on some of the repositories.
- name: Contributing
  description: There is the standard contributing README for GitHub repos.
- name: Directory Structure
  description: A few of them would provide an overview of folders.
- name: Documentation Generator
  description: Publishing markdown or other docs.
- name: Extensions
  description: Several providers shared the OAS extensions they put to use.
- name: GitHub Actions
  description: There were GitHub actions to automate the CI/CD of OpenAPIs.
- name: Historical
  description: Providing historical links to previous versions of an OpenAPI.
- name: Issues
  description: The GitHub issues are used as a feedback loop for the OpenAPI definitions.
- name: JSON
  description: Others would publish only a JSON, or a JSON to accompany the YAML.
- name: JSON Schema
  description: Storing your JSON Schema separate from OpenAPI is compelling.
- name: Licensing
  description: There was always licensing for the OpenAPI specs and the code.
- name: Limitations
  description: I saw explanations of the limitations of each of the OpenAPIs.
- name: Make File
  description: Some provide make files that would automate various builds.
- name: Maturity
  description: Occasionally you would see preview and other maturity dimensions.
- name: Modular OpenAPI
  description: Digital Ocean took a very modular approach to theirs.
- name: Multiple OpenAPI
  description: Others would break down and publish multiple OpenAPIs.
- name: NPM Package
  description: Providing an NPM package for your OpenAPI and supporting resources.
- name: OpenAPI Editor
  description: Linking to an OpenAPI editor to support work.
- name: OpenAPI Generator
  description: Allowing you to generate the OpenAPIs.
- name: Postman Collections
  description: Provided one or more Postman Collections to go with your OpenAPI.
- name: Quality Badges
  description: There were badges showing the health of each build.
- name: README
  description: They put a variety of efforts into their README for consumers.
- name: Repository
  description: They all had a dedicated GItHub repository for their OpenAPIs.
- name: Reviews
  description: Microsoft had the ability to get a review of the OpenAPI being added.
- name: Security
  description: Details regarding the security of an API, and what is required.
- name: Server Environments
  description: Providing a list of servers available to call when using an API.
- name: Software Development Kits (SDKs)
  description: Provide SDKs that are generated from OpenAPI in multiple languages. 
- name: Single OpenAPI
  description: Some of them would just publish a single OpenAPI to rule them all.
- name: Spectral
  description: There were Spectral rules, as well as build processes using them.
- name: Status
  description: There were various mechanisms for communicating the status of OpenAPIs.
- name: Support
  description: Some providers were explicit about the support they would provide.
- name: Testing
  description: Sometimes you could find test suites to make sure OpenAPI checked out.
- name: Versions
  description: Sometimes they clearly broke out various versions of the OpenAPI.
- name: Workflows
  description: Offering workflows built on an API with code, or other artifact. 
- name: YAML
  description: Some of them would also provide a YAML version of their OpenAPI.